// js/ar_logic.js - versión mejorada con múltiples filtros faciales aleatorios

// let arActive = false;
// let cameraStream = null;
// let detectionLoopId = null;
// let lastFaceTime = 0;
// let lastObjectTime = 0;

// // Referencias a DOM
// const video           = document.getElementById('camera-video');
// const placeholder     = document.getElementById('camera-placeholder');
// const errorMessage    = document.getElementById('error-message');
// const arInterface     = document.getElementById('ar-interface');
// const arContainer     = document.getElementById('ar-container');
// const faceEffect      = document.getElementById('face-effect');
// const effectIcon      = document.getElementById('effect-icon');
// const effectName      = document.getElementById('effect-name');
// const randomCreature  = document.getElementById('random-creature');
// const creatureIcon    = document.getElementById('creature-icon');
// const creatureName    = document.getElementById('creature-name');
// const creatureAction  = document.getElementById('creature-action');
// const windowAnimation = document.getElementById('window-animation');
// const plantAnimal     = document.getElementById('plant-animal');
// const animalIcon      = document.getElementById('animal-icon');
// const animalName      = document.getElementById('animal-name');

// const offscreenCanvas = document.createElement('canvas');
// const offscreenCtx    = offscreenCanvas.getContext('2d');

// let cocoModel = null;



// js/ar_logic.js - versión completa con filtros, criaturas, overlays y easter eggs

let arActive = false;
let cameraStream = null;
let detectionLoopId = null;
let lastFaceTime = 0;
let lastObjectTime = 0;

// Referencias a DOM
const video           = document.getElementById('camera-video');
const placeholder     = document.getElementById('camera-placeholder');
const errorMessage    = document.getElementById('error-message');
const arInterface     = document.getElementById('ar-interface');
const arContainer     = document.getElementById('ar-container');
const faceEffect      = document.getElementById('face-effect');
const effectIcon      = document.getElementById('effect-icon');
const effectName      = document.getElementById('effect-name');
const randomCreature  = document.getElementById('random-creature');
const creatureIcon    = document.getElementById('creature-icon');
const creatureName    = document.getElementById('creature-name');
const creatureAction  = document.getElementById('creature-action');
const windowAnimation = document.getElementById('window-animation');
const plantAnimal     = document.getElementById('plant-animal');
const animalIcon      = document.getElementById('animal-icon');
const animalName      = document.getElementById('animal-name');

const overlayLayer    = document.createElement('div');
overlayLayer.className = 'overlay-canvas';
document.querySelector('.camera-feed').appendChild(overlayLayer);

const offscreenCanvas = document.createElement('canvas');
const offscreenCtx    = offscreenCanvas.getContext('2d');

let cocoModel = null;

const multimediaQueue = [
  { type: 'image', src: '/static/img/aliceinwonderland.jpg', duration: 5000 },
  { type: 'video', src: '/static/video/MarioBomb.mp4', duration: 10000 },
  { type: 'image', src: '/static/img/crew.png', duration: 5000 },
  { type: 'video', src: '/static/video/MarioKart.mp4', duration: 10000 },
  { type: 'youtube', src: 'https://www.youtube.com/embed/OPiDMM6YwFA?start=11&autoplay=1', duration: 10000 },
  { type: 'youtube', src: 'https://www.youtube.com/embed/yzyKVMd5Brk?start=40&autoplay=1', duration: 10000 },
  { type: 'youtube', src: 'https://www.youtube.com/embed/WE3PLVmZXw8?start=10&autoplay=1', duration: 10000 }
];

let overlayIndex = 0;
function cycleOverlay() {
  overlayLayer.innerHTML = '';
  const item = multimediaQueue[overlayIndex];

  if (item.type === 'image') {
    const img = document.createElement('img');
    img.src = item.src;
    img.style.width = '100%';
    img.style.height = '100%';
    img.style.objectFit = 'cover';
    overlayLayer.appendChild(img);
  } else if (item.type === 'video') {
    const vid = document.createElement('video');
    vid.src = item.src;
    vid.autoplay = true;
    vid.muted = true;
    vid.loop = true;
    vid.style.width = '100%';
    vid.style.height = '100%';
    vid.style.objectFit = 'cover';
    overlayLayer.appendChild(vid);
  } else if (item.type === 'youtube') {
    const iframe = document.createElement('iframe');
    iframe.src = item.src;
    iframe.allow = 'autoplay';
    iframe.frameBorder = '0';
    iframe.allowFullscreen = true;
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    overlayLayer.appendChild(iframe);
  }

  overlayIndex = (overlayIndex + 1) % multimediaQueue.length;
  setTimeout(cycleOverlay, item.duration);
}

async function startARExperience(){
  hideError();
  arInterface.style.display = 'none';
  arContainer.style.display  = 'flex';
  arActive = true;

  const ready = await startCamera();
  if(!ready) return stopARExperience();

  await loadModels();
  lastFaceTime   = 0;
  lastObjectTime = 0;

  cycleOverlay();
  detectionLoop();
}

// Código adicional fusionado desde versión con detección facial, criaturas, códigos QR y easter eggs
// Aquí se incluye todo el código que ya tienes en tu versión extendida con filtros y lógica de detección
// Puedes pegar directamente el resto sin quitar funcionalidades

// (Pega aquí el bloque completo de la lógica facial, filtros, detección de objetos y easter eggs, como lo has mostrado en tu mensaje previo)




const filterOptions = [
  'CONEJO.png', 'CUERNOS-ROJOS.png', 'DIABLITO.png', 'ENAMORADO(A).png',
  'MAPACHE.png', 'MIAU.png', 'UNICORNIO.png', 'ZORRO INTELECTUAL.png', 'DALMATA.png'
];

const filtersMetadata = {
  "CONEJO.png": {
    anclas: {
      ojo_izquierdo: [0.30, 0.42], ojo_derecho: [0.70, 0.42], nariz: [0.50, 0.57], boca: [0.50, 0.72]
    }
  },
  "CUERNOS-ROJOS.png": {
    anclas: {
      ojo_izquierdo: [0.33, 0.45], ojo_derecho: [0.67, 0.45], nariz: [0.50, 0.60], boca: [0.50, 0.80]
    }
  },
  "DALMATA.png": {
    anclas: {
      ojo_izquierdo: [0.30, 0.40], ojo_derecho: [0.70, 0.40], nariz: [0.50, 0.58], boca: [0.50, 0.80]
    }
  },
  "DIABLITO.png": {
    anclas: {
      ojo_izquierdo: [0.35, 0.42], ojo_derecho: [0.65, 0.42], nariz: [0.50, 0.56], boca: [0.50, 0.76]
    }
  },
  "ENAMORADO(A).png": {
    anclas: {
      ojo_izquierdo: [0.30, 0.42], ojo_derecho: [0.70, 0.42], nariz: [0.50, 0.58], boca: [0.50, 0.75]
    }
  },
  "Filtroalien.png": {
    anclas: {
      ojo_izquierdo: [0.32, 0.42], ojo_derecho: [0.68, 0.42], nariz: [0.50, 0.58], boca: [0.50, 0.74]
    }
  },
  "MAPACHE.png": {
    anclas: {
      ojo_izquierdo: [0.32, 0.44], ojo_derecho: [0.68, 0.44], nariz: [0.50, 0.60], boca: [0.50, 0.75]
    }
  },
  "MIAU.png": {
    anclas: {
      ojo_izquierdo: [0.32, 0.42], ojo_derecho: [0.68, 0.42], nariz: [0.50, 0.58], boca: [0.50, 0.72]
    }
  },
  "UNICORNIO.png": {
    anclas: {
      ojo_izquierdo: [0.35, 0.44], ojo_derecho: [0.65, 0.44], nariz: [0.50, 0.58], boca: [0.50, 0.75]
    }
  },
  "ZORRO INTELECTUAL.png": {
    anclas: {
      ojo_izquierdo: [0.34, 0.44], ojo_derecho: [0.66, 0.44], nariz: [0.50, 0.58], boca: [0.50, 0.74]
    }
  }
};

function show(el){ el.style.display = 'flex'; }
function hide(el){ el.style.display = 'none'; }
function showError(msg){ errorMessage.innerText = msg; errorMessage.style.display = 'block'; }
function hideError(){ errorMessage.innerText = ''; errorMessage.style.display = 'none'; }

async function startCamera(){
  try {
    if(cameraStream) stopCamera();

    const prefs = [
      { video: { facingMode: 'environment' } },
      { video: { facingMode: 'user' } },
      { video: true }
    ];
    for(let p of prefs){
      try { cameraStream = await navigator.mediaDevices.getUserMedia(p); break; }
      catch{}
    }
    if(!cameraStream) throw new Error('No se pudo acceder a la cámara');

    video.srcObject = cameraStream;
    await video.play();

    offscreenCanvas.width  = video.videoWidth;
    offscreenCanvas.height = video.videoHeight;

    hide(placeholder);
    return true;
  } catch(err){
    showError(err.message || 'Error al acceder a la cámara');
    show(placeholder);
    return false;
  }
}

function stopCamera(){
  if(cameraStream){
    cameraStream.getTracks().forEach(t=>t.stop());
    cameraStream = null;
  }
  video.srcObject = null;
  show(placeholder);
}

async function loadModels(){
  await faceapi.nets.tinyFaceDetector.loadFromUri('/static/models');
  await faceapi.nets.faceLandmark68TinyNet.loadFromUri('/static/models');
  cocoModel = await cocoSsd.load();
}

function clearOldFilters() {
  document.querySelectorAll('.dynamic-filter').forEach(el => el.remove());
}

function averagePoint(points) {
  const x = points.reduce((sum, p) => sum + p.x, 0) / points.length;
  const y = points.reduce((sum, p) => sum + p.y, 0) / points.length;
  return { x, y };
}

async function handleFaceDetection() {
  clearOldFilters();
  const detections = await faceapi
    .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
    .withFaceLandmarks(true);

  if (!detections.length) return;

  const scaleX = video.clientWidth / video.videoWidth;
  const scaleY = video.clientHeight / video.videoHeight;

  detections.forEach(det => {
    const landmarks = det.landmarks;

    const points = {
      ojo_izquierdo: averagePoint(landmarks.getLeftEye()),
      ojo_derecho: averagePoint(landmarks.getRightEye()),
      nariz: averagePoint(landmarks.getNose()),
      boca: averagePoint(landmarks.getMouth())
    };

    const filterName = filterOptions[Math.floor(Math.random() * filterOptions.length)];
    const metadata = filtersMetadata[filterName];

    if (!metadata || !metadata.anclas) return;

    const anchorKey = Object.keys(metadata.anclas).find(key => points[key]);
    if (!anchorKey) return;

    const anchorRelative = metadata.anclas[anchorKey];
    const faceAnchor = points[anchorKey];

    const faceX = faceAnchor.x * scaleX;
    const faceY = faceAnchor.y * scaleY;

    const eyeDist = Math.abs(points.ojo_izquierdo.x - points.ojo_derecho.x) * scaleX || 100;
    const width = eyeDist * 3.0;
    const height = width * 1.3;

    const offsetX = anchorRelative[0] * width;
    const offsetY = anchorRelative[1] * height;

    const img = document.createElement('img');
    img.src = `/static/img/${filterName}`;
    img.className = 'dynamic-filter';
    Object.assign(img.style, {
      position: 'absolute',
      width: `${width}px`,
      height: `${height}px`,
      left: `${faceX - offsetX}px`,
      top: `${faceY - offsetY}px`,
      pointerEvents: 'none',
      zIndex: 10
    });
    video.parentElement.appendChild(img);
  });
}

function spawnRandomCreature(){
  const opts = [
    {name:'Conejo',  icon:'🐇', action:'Saltó'},
    {name:'Araña',   icon:'🕷️', action:'Escurrió'},
    {name:'Robot',   icon:'🤖', action:'Desapareció'},
    {name:'Dragón',  icon:'🐉', action:'Huyó'},
    {name:'Mariposa',icon:'🦋', action:'Voló'}
  ];
  const pick = opts[Math.floor(Math.random()*opts.length)];
  creatureIcon.innerText   = pick.icon;
  creatureName.innerText   = pick.name;
  creatureAction.innerText = pick.action + '!';
  show(randomCreature);
  setTimeout(()=>hide(randomCreature), 3000);
}

function triggerPlantAnimal(){
  const opts = [
    {name:'Colibrí',   icon:'🐦'},
    {name:'Mariquita', icon:'🐞'},
    {name:'Ardilla',   icon:'🐿️'},
    {name:'Serpiente', icon:'🐍'},
    {name:'Mariposa',  icon:'🦋'}
  ];
  const pick = opts[Math.floor(Math.random()*opts.length)];
  animalIcon.innerText = pick.icon;
  animalName.innerText = pick.name;
  show(plantAnimal);
  setTimeout(()=>hide(plantAnimal), 4000);
}

function triggerWindowAnimation(data){
  show(windowAnimation);
  setTimeout(()=>hide(windowAnimation), 5000);
}

async function detectionLoop(){
  if(!arActive) return;

  offscreenCtx.drawImage(video,0,0,offscreenCanvas.width,offscreenCanvas.height);
  const frame = offscreenCtx.getImageData(0,0,offscreenCanvas.width,offscreenCanvas.height);
  const now = Date.now();

  if(now - lastFaceTime > 1500){
    lastFaceTime = now;
    handleFaceDetection();
  }

  if(now - lastObjectTime > 2000){
    lastObjectTime = now;
    const objs = await cocoModel.detect(video);
    if(objs.find(o => o.class==='potted plant')) triggerPlantAnimal();
    else if(objs.find(o => o.class==='person')) spawnRandomCreature();
  }

  const code = jsQR(frame.data, frame.width, frame.height);
  if(code) triggerWindowAnimation(code.data);

  detectionLoopId = requestAnimationFrame(detectionLoop);
}

async function startARExperience(){
  hideError();
  arInterface.style.display = 'none';
  arContainer.style.display  = 'flex';
  arActive = true;

  const ready = await startCamera();
  if(!ready) return stopARExperience();

  await loadModels();
  lastFaceTime   = 0;
  lastObjectTime = 0;
  detectionLoop();
}

function stopARExperience(){
  arActive = false;
  cancelAnimationFrame(detectionLoopId);
  stopCamera();
  hide(faceEffect);
  hide(randomCreature);
  hide(windowAnimation);
  hide(plantAnimal);
  clearOldFilters();
  arContainer.style.display  = 'none';
  arInterface.style.display = 'flex';
}

document.getElementById('start-btn').addEventListener('click', startARExperience);
document.getElementById('exit-btn').addEventListener('click',  stopARExperience);

let secretClickCount = 0;
let secretClickTimeout;

document.getElementById('start-btn').addEventListener('click', () => {
  secretClickCount++;
  clearTimeout(secretClickTimeout);
  secretClickTimeout = setTimeout(() => {
    secretClickCount = 0;
  }, 1500);

  if (secretClickCount === 5) {
    const egg1 = document.getElementById('easter-egg-1');
    egg1.style.display = 'block';
    setTimeout(() => {
      egg1.style.display = 'none';
      secretClickCount = 0;
    }, 5000);
  }
});

document.addEventListener('keydown', (e) => {
  if (e.ctrlKey && e.altKey && (e.key === 'e' || e.key === 'E')) {
    const egg2 = document.getElementById('easter-egg-2');
    egg2.style.display = 'block';
    setTimeout(() => {
      egg2.style.display = 'none';
    }, 5000);
  }
});
